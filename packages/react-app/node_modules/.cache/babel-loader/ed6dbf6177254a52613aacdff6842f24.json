{"ast":null,"code":"import { DEFAULT_SUPPORTED_CHAINS } from '../../../constants';\nimport { subscribeToProviderEvents } from '../../../helpers';\nimport { Event } from '../../../helpers/event';\nimport { getAddNetworkParams } from '../../../helpers/getAddNetworkParams';\nimport { validateArguments } from '../../../helpers/validateArgument';\nimport { DEFAULT_CONFIG } from '../../../model/config/default';\nimport { MetamaskConnector } from './implementations';\nexport class ConnectorController {\n  constructor(connector) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_CONFIG;\n    this.connector = connector;\n    this.updated = new Event();\n    this.newBlock = new Event();\n    this.active = false;\n    this.accounts = [];\n    this.errors = [];\n    this._config = Object.assign({}, config);\n    connector.update.on(_ref => {\n      let {\n        chainId,\n        accounts\n      } = _ref;\n      this.chainId = chainId;\n      this.accounts = accounts;\n      this.emitUpdate();\n    });\n  }\n  emitUpdate() {\n    this.updated.emit({\n      active: this.active,\n      chainId: this.chainId,\n      accounts: this.accounts,\n      blockNumber: this.blockNumber,\n      errors: this.errors\n    });\n  }\n  updateConfig(config) {\n    this._config = Object.assign(Object.assign({}, this._config), config);\n  }\n  getProvider() {\n    return this.connector.provider;\n  }\n  async activate() {\n    let connectorActivator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : connector => connector.activate();\n    await connectorActivator(this.connector);\n    const provider = this.getProvider();\n    if (!provider) {\n      throw new Error('Failed to activate connector');\n    }\n    this.clearSubscriptions = subscribeToProviderEvents(this.connector, _ref2 => {\n      let {\n        chainId,\n        accounts\n      } = _ref2;\n      if (chainId !== undefined) {\n        this.chainId = chainId;\n      }\n      if (accounts !== undefined) {\n        this.accounts = accounts;\n      }\n      this.emitUpdate();\n    }, () => {\n      if (this.connector instanceof MetamaskConnector && this._config.noMetamaskDeactivate) {\n        return;\n      }\n      void this.deactivate();\n    });\n    this.blockNumber = await provider.getBlockNumber();\n    this.newBlock.emit(this.blockNumber);\n    this.removeBlockEffect = this.newBlock.addEffect(() => {\n      const listener = blockNumber => {\n        this.blockNumber = blockNumber;\n        this.newBlock.emit(blockNumber);\n        this.emitUpdate();\n      };\n      provider.on('block', listener);\n      return () => {\n        provider.off('block', listener);\n      };\n    });\n    this.emitUpdate();\n  }\n  async deactivate() {\n    var _a, _b;\n    this.active = false;\n    (_a = this.removeBlockEffect) === null || _a === void 0 ? void 0 : _a.call(this);\n    (_b = this.clearSubscriptions) === null || _b === void 0 ? void 0 : _b.call(this);\n    await this.connector.deactivate();\n    this.chainId = undefined;\n    this.accounts = [];\n    this.blockNumber = undefined;\n    this.errors = [];\n    this.emitUpdate();\n  }\n  async switchNetwork(chainId) {\n    var _a;\n    const provider = this.getProvider();\n    validateArguments({\n      chainId\n    }, {\n      chainId: 'number'\n    });\n    if (!provider) {\n      throw new Error('Connector not initialized');\n    }\n    try {\n      await provider.send('wallet_switchEthereumChain', [{\n        chainId: `0x${chainId.toString(16)}`\n      }]);\n    } catch (error) {\n      const errChainNotAddedYet = 4902; // Metamask error code\n      if (error.code === errChainNotAddedYet) {\n        const chain = ((_a = this._config.networks) !== null && _a !== void 0 ? _a : DEFAULT_SUPPORTED_CHAINS).find(chain => chain.chainId === chainId);\n        if (!chain) throw new Error(`ChainId \"${chainId}\" not found in config.networks. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`);\n        if (!chain.rpcUrl) throw new Error(`ChainId \"${chainId}\" does not have RPC url configured by default. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`);\n        await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n      } else {\n        throw error;\n      }\n    }\n  }\n  reportError(error) {\n    this.errors.push(error);\n    this.emitUpdate();\n  }\n}","map":{"version":3,"sources":["../../../../../../src/providers/network/connectors/connectorController.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { DEFAULT_SUPPORTED_CHAINS } from '../../../constants';\nimport { subscribeToProviderEvents } from '../../../helpers';\nimport { Event } from '../../../helpers/event';\nimport { getAddNetworkParams } from '../../../helpers/getAddNetworkParams';\nimport { validateArguments } from '../../../helpers/validateArgument';\nimport { DEFAULT_CONFIG } from '../../../model/config/default';\nimport { MetamaskConnector } from './implementations';\nexport class ConnectorController {\n    constructor(connector, config = DEFAULT_CONFIG) {\n        this.connector = connector;\n        this.updated = new Event();\n        this.newBlock = new Event();\n        this.active = false;\n        this.accounts = [];\n        this.errors = [];\n        this._config = Object.assign({}, config);\n        connector.update.on(({ chainId, accounts }) => {\n            this.chainId = chainId;\n            this.accounts = accounts;\n            this.emitUpdate();\n        });\n    }\n    emitUpdate() {\n        this.updated.emit({\n            active: this.active,\n            chainId: this.chainId,\n            accounts: this.accounts,\n            blockNumber: this.blockNumber,\n            errors: this.errors,\n        });\n    }\n    updateConfig(config) {\n        this._config = Object.assign(Object.assign({}, this._config), config);\n    }\n    getProvider() {\n        return this.connector.provider;\n    }\n    async activate(connectorActivator = (connector) => connector.activate()) {\n        await connectorActivator(this.connector);\n        const provider = this.getProvider();\n        if (!provider) {\n            throw new Error('Failed to activate connector');\n        }\n        this.clearSubscriptions = subscribeToProviderEvents(this.connector, ({ chainId, accounts }) => {\n            if (chainId !== undefined) {\n                this.chainId = chainId;\n            }\n            if (accounts !== undefined) {\n                this.accounts = accounts;\n            }\n            this.emitUpdate();\n        }, () => {\n            if (this.connector instanceof MetamaskConnector && this._config.noMetamaskDeactivate) {\n                return;\n            }\n            void this.deactivate();\n        });\n        this.blockNumber = await provider.getBlockNumber();\n        this.newBlock.emit(this.blockNumber);\n        this.removeBlockEffect = this.newBlock.addEffect(() => {\n            const listener = (blockNumber) => {\n                this.blockNumber = blockNumber;\n                this.newBlock.emit(blockNumber);\n                this.emitUpdate();\n            };\n            provider.on('block', listener);\n            return () => {\n                provider.off('block', listener);\n            };\n        });\n        this.emitUpdate();\n    }\n    async deactivate() {\n        var _a, _b;\n        this.active = false;\n        (_a = this.removeBlockEffect) === null || _a === void 0 ? void 0 : _a.call(this);\n        (_b = this.clearSubscriptions) === null || _b === void 0 ? void 0 : _b.call(this);\n        await this.connector.deactivate();\n        this.chainId = undefined;\n        this.accounts = [];\n        this.blockNumber = undefined;\n        this.errors = [];\n        this.emitUpdate();\n    }\n    async switchNetwork(chainId) {\n        var _a;\n        const provider = this.getProvider();\n        validateArguments({ chainId }, { chainId: 'number' });\n        if (!provider) {\n            throw new Error('Connector not initialized');\n        }\n        try {\n            await provider.send('wallet_switchEthereumChain', [{ chainId: `0x${chainId.toString(16)}` }]);\n        }\n        catch (error) {\n            const errChainNotAddedYet = 4902; // Metamask error code\n            if (error.code === errChainNotAddedYet) {\n                const chain = ((_a = this._config.networks) !== null && _a !== void 0 ? _a : DEFAULT_SUPPORTED_CHAINS).find((chain) => chain.chainId === chainId);\n                if (!chain)\n                    throw new Error(`ChainId \"${chainId}\" not found in config.networks. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`);\n                if (!chain.rpcUrl)\n                    throw new Error(`ChainId \"${chainId}\" does not have RPC url configured by default. See https://usedapp-docs.netlify.app/docs/Guides/Transactions/Switching%20Networks`);\n                await provider.send('wallet_addEthereumChain', [getAddNetworkParams(chain)]);\n            }\n            else {\n                throw error;\n            }\n        }\n    }\n    reportError(error) {\n        this.errors.push(error);\n        this.emitUpdate();\n    }\n}\n//# sourceMappingURL=connectorController.js.map"]},"metadata":{},"sourceType":"module"}