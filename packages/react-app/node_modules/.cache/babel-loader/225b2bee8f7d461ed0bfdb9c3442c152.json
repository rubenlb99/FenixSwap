{"ast":null,"code":"import { getAddress } from 'ethers/lib/utils';\nimport { useConnector } from '../providers/network/connectors';\nimport { useConfig } from '../hooks';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\nimport { useEffect, useState } from 'react';\nimport { useReadonlyNetworkStates } from '../providers/network/readonlyNetworks/context';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/TrueFiEng/useDApp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers() {\n  var _a;\n  const {\n    connector,\n    deactivate,\n    activate,\n    activateBrowserWallet,\n    isLoading\n  } = useConnector();\n  const readonlyNetwork = useReadonlyNetwork();\n  const [errors, setErrors] = useState((_a = connector === null || connector === void 0 ? void 0 : connector.errors) !== null && _a !== void 0 ? _a : []);\n  const [account, setAccount] = useState(getAccount(connector));\n  const [provider, setProvider] = useState(connector === null || connector === void 0 ? void 0 : connector.getProvider());\n  const [chainId, setChainId] = useState(connector === null || connector === void 0 ? void 0 : connector.chainId);\n  useEffect(() => {\n    if (!(connector === null || connector === void 0 ? void 0 : connector.getProvider())) {\n      setAccount(undefined);\n      setProvider(readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider);\n      setChainId(readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId);\n      setErrors([]);\n      return;\n    }\n    setChainId(connector.chainId);\n    setErrors(connector.errors);\n    setProvider(connector.getProvider());\n    setAccount(getAccount(connector));\n    return connector.updated.on(_ref => {\n      let {\n        chainId,\n        errors,\n        accounts\n      } = _ref;\n      setChainId(chainId);\n      setErrors(errors);\n      if (accounts[0]) {\n        setAccount(getAddress(accounts[0]));\n      } else {\n        setAccount(undefined);\n      }\n    });\n  }, [connector]);\n  const {\n    networks,\n    readOnlyUrls\n  } = useConfig();\n  const [error, setError] = useState(undefined);\n  const networkStates = useReadonlyNetworkStates();\n  const configuredChainIds = Object.keys(readOnlyUrls || {}).map(chainId => parseInt(chainId, 10));\n  const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map(network => network.chainId);\n  useEffect(() => {\n    const isNotConfiguredChainId = chainId && configuredChainIds && configuredChainIds.indexOf(chainId) < 0;\n    const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n    if (isUnsupportedChainId || isNotConfiguredChainId) {\n      const chainIdError = new Error(`${isUnsupportedChainId ? 'Unsupported' : 'Not configured'} chain id: ${chainId}.`);\n      chainIdError.name = 'ChainIdError';\n      setError(chainIdError);\n      return;\n    }\n    for (const networkState of Object.values(networkStates)) {\n      if (networkState.errors.length > 0) {\n        setError(networkState.errors[networkState.errors.length - 1]);\n        return;\n      }\n    }\n    setError(errors === null || errors === void 0 ? void 0 : errors[errors.length - 1]);\n  }, [chainId, errors, networkStates]);\n  return {\n    connector: undefined,\n    library: provider,\n    chainId: (error === null || error === void 0 ? void 0 : error.name) === 'ChainIdError' ? undefined : provider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n    account,\n    active: !!provider,\n    activate: async providerOrConnector => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n        await providerOrConnector.activate();\n        return activate(await providerOrConnector.getProvider());\n      }\n      return activate(providerOrConnector);\n    },\n    activateBrowserWallet,\n    deactivate,\n    setError: () => {\n      throw new Error('setError is deprecated');\n    },\n    error,\n    isLoading,\n    switchNetwork: async chainId => {\n      await (connector === null || connector === void 0 ? void 0 : connector.switchNetwork(chainId));\n    }\n  };\n}\nconst getAccount = connector => {\n  if (connector === null || connector === void 0 ? void 0 : connector.accounts[0]) {\n    return getAddress(connector.accounts[0]);\n  }\n  return undefined;\n};","map":{"version":3,"sources":["../../../../src/hooks/useEthers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { getAddress } from 'ethers/lib/utils';\nimport { useConnector } from '../providers/network/connectors';\nimport { useConfig } from '../hooks';\nimport { useReadonlyNetwork } from './useReadonlyProvider';\nimport { useEffect, useState } from 'react';\nimport { useReadonlyNetworkStates } from '../providers/network/readonlyNetworks/context';\n/**\n * Returns connection state and functions that allow to manipulate the state.\n * **Requires**: `<ConfigProvider>`\n *\n * @public\n * @returns {} Object with the following:\n    - `account: string` - current user account (or *undefined* if not connected)\n    - `chainId: ChainId` - current chainId (or *undefined* if not connected)\n    - `library: Web3Provider` - an instance of ethers [Web3Provider](https://github.com/TrueFiEng/useDApp/tree/master/packages/example) (or `undefined` if not connected)\n    - `active: boolean` - returns if provider is connected (read or write mode)\n    - `activateBrowserWallet()` - function that will initiate connection to browser web3 extension (e.g. Metamask)\n    - `async activate(connector: AbstractConnector, onError?: (error: Error) => void, throwErrors?: boolean)` - function that allows to connect to a wallet\n    - `async deactivate()` - function that disconnects wallet\n    - `error?: Error` - an error that occurred during connecting (e.g. connection is broken, unsupported network)\n */\nexport function useEthers() {\n    var _a;\n    const { connector, deactivate, activate, activateBrowserWallet, isLoading } = useConnector();\n    const readonlyNetwork = useReadonlyNetwork();\n    const [errors, setErrors] = useState((_a = connector === null || connector === void 0 ? void 0 : connector.errors) !== null && _a !== void 0 ? _a : []);\n    const [account, setAccount] = useState(getAccount(connector));\n    const [provider, setProvider] = useState(connector === null || connector === void 0 ? void 0 : connector.getProvider());\n    const [chainId, setChainId] = useState(connector === null || connector === void 0 ? void 0 : connector.chainId);\n    useEffect(() => {\n        if (!(connector === null || connector === void 0 ? void 0 : connector.getProvider())) {\n            setAccount(undefined);\n            setProvider(readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider);\n            setChainId(readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId);\n            setErrors([]);\n            return;\n        }\n        setChainId(connector.chainId);\n        setErrors(connector.errors);\n        setProvider(connector.getProvider());\n        setAccount(getAccount(connector));\n        return connector.updated.on(({ chainId, errors, accounts }) => {\n            setChainId(chainId);\n            setErrors(errors);\n            if (accounts[0]) {\n                setAccount(getAddress(accounts[0]));\n            }\n            else {\n                setAccount(undefined);\n            }\n        });\n    }, [connector]);\n    const { networks, readOnlyUrls } = useConfig();\n    const [error, setError] = useState(undefined);\n    const networkStates = useReadonlyNetworkStates();\n    const configuredChainIds = Object.keys(readOnlyUrls || {}).map((chainId) => parseInt(chainId, 10));\n    const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map((network) => network.chainId);\n    useEffect(() => {\n        const isNotConfiguredChainId = chainId && configuredChainIds && configuredChainIds.indexOf(chainId) < 0;\n        const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;\n        if (isUnsupportedChainId || isNotConfiguredChainId) {\n            const chainIdError = new Error(`${isUnsupportedChainId ? 'Unsupported' : 'Not configured'} chain id: ${chainId}.`);\n            chainIdError.name = 'ChainIdError';\n            setError(chainIdError);\n            return;\n        }\n        for (const networkState of Object.values(networkStates)) {\n            if (networkState.errors.length > 0) {\n                setError(networkState.errors[networkState.errors.length - 1]);\n                return;\n            }\n        }\n        setError(errors === null || errors === void 0 ? void 0 : errors[errors.length - 1]);\n    }, [chainId, errors, networkStates]);\n    return {\n        connector: undefined,\n        library: provider,\n        chainId: (error === null || error === void 0 ? void 0 : error.name) === 'ChainIdError' ? undefined : provider !== undefined ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,\n        account,\n        active: !!provider,\n        activate: async (providerOrConnector) => {\n            if ('getProvider' in providerOrConnector) {\n                console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n                await providerOrConnector.activate();\n                return activate(await providerOrConnector.getProvider());\n            }\n            return activate(providerOrConnector);\n        },\n        activateBrowserWallet,\n        deactivate,\n        setError: () => {\n            throw new Error('setError is deprecated');\n        },\n        error,\n        isLoading,\n        switchNetwork: async (chainId) => {\n            await (connector === null || connector === void 0 ? void 0 : connector.switchNetwork(chainId));\n        },\n    };\n}\nconst getAccount = (connector) => {\n    if (connector === null || connector === void 0 ? void 0 : connector.accounts[0]) {\n        return getAddress(connector.accounts[0]);\n    }\n    return undefined;\n};\n//# sourceMappingURL=useEthers.js.map"]},"metadata":{},"sourceType":"module"}