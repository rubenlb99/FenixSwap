{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { MultiChainStateProvider } from './chainState';\nimport { useConfig } from '../hooks';\nimport { NotificationsProvider } from './notifications/provider';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { ReadonlyNetworksProvider } from './network';\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers';\nimport { WindowProvider } from './window';\nimport { ConnectorContextProvider } from './network/connectors/context';\n/**\n * Provides basic services for a DApp.\n * @public\n */\nexport function DAppProvider(_ref) {\n  let {\n    config,\n    children\n  } = _ref;\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    })\n  }));\n}\nconst getMulticallAddresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(network => result[network.chainId] = network.multicallAddress);\n  return result;\n};\nconst getMulticall2Addresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.forEach(network => {\n    if (network.multicall2Address) {\n      result[network.chainId] = network.multicall2Address;\n    }\n  });\n  return result;\n};\nfunction DAppProviderWithConfig(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const {\n    multicallAddresses,\n    networks,\n    multicallVersion\n  } = useConfig();\n  const defaultAddresses = useMemo(() => multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks), [networks, multicallVersion]);\n  const multicallAddressesMerged = useMemo(() => Object.assign(Object.assign({}, defaultAddresses), multicallAddresses), [defaultAddresses, multicallAddresses]);\n  return _jsx(ConnectorContextProvider, {\n    children: _jsx(WindowProvider, {\n      children: _jsx(ReadonlyNetworksProvider, {\n        children: _jsx(BlockNumbersProvider, {\n          children: _jsx(LocalMulticallProvider, {\n            children: _jsx(MultiChainStateProvider, Object.assign({\n              multicallAddresses: multicallAddressesMerged\n            }, {\n              children: _jsx(NotificationsProvider, {\n                children: _jsx(TransactionProvider, {\n                  children: children\n                })\n              })\n            }))\n          })\n        })\n      })\n    })\n  });\n}","map":{"version":3,"sources":["../../../../src/providers/DAppProvider.tsx"],"names":[],"mappings":";AAAA,SAAoB,OAAO,QAAQ,OAAO;AAE1C,SAAS,cAAc,QAAQ,UAAU;AACzC,SAAS,uBAAuB,QAAQ,cAAc;AACtD,SAAS,SAAS,QAAQ,UAAU;AACpC,SAAS,qBAAqB,QAAQ,0BAA0B;AAChE,SAAS,mBAAmB,QAAQ,yBAAyB;AAC7D,SAAS,sBAAsB,QAAQ,0BAA0B;AACjE,SAAS,wBAAwB,QAAQ,WAAW;AACpD,SAAS,oBAAoB,QAAQ,4BAA4B;AACjE,SAAS,cAAc,QAAQ,UAAU;AACzC,SAAS,wBAAwB,QAAQ,8BAA8B;AAUvE;;;AAGG;AACH,OAAM,SAAU,YAAY,OAAwC;EAAA,IAAvC;IAAE,MAAM;IAAE;EAAQ,CAAqB;EAClE,OACE,IAAA,CAAC,cAAc,EAAA,MAAA,CAAA,MAAA,CAAA;IAAC,MAAM,EAAE;EAAM,CAAA,EAAA;IAAA,QAAA,EAC5B,IAAA,CAAC,sBAAsB,EAAA;MAAA,QAAA,EAAE;IAAQ,CAAA;EAA0B,CAAA,CAAA,CAC5C;AAErB;AAMA,MAAM,qBAAqB,GAAI,QAA6B,IAAI;EAC9D,MAAM,MAAM,GAAgC,CAAA,CAAE;EAC9C,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,OAAO,CAAE,OAAO,IAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,gBAAiB,CAAC;EACpF,OAAO,MAAM;AACf,CAAC;AAED,MAAM,sBAAsB,GAAI,QAA6B,IAAI;EAC/D,MAAM,MAAM,GAAgC,CAAA,CAAE;EAC9C,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,OAAO,CAAE,OAAO,IAAI;IAC5B,IAAI,OAAO,CAAC,iBAAiB,EAAE;MAC7B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,iBAAiB;IACpD;EACH,CAAC,CAAC;EACF,OAAO,MAAM;AACf,CAAC;AAED,SAAS,sBAAsB,QAA8B;EAAA,IAA7B;IAAE;EAAQ,CAAmB;EAC3D,MAAM;IAAE,kBAAkB;IAAE,QAAQ;IAAE;EAAgB,CAAE,GAAG,SAAS,EAAE;EACtE,MAAM,gBAAgB,GAAG,OAAO,CAC9B,MAAO,gBAAgB,KAAK,CAAC,GAAG,qBAAqB,CAAC,QAAQ,CAAC,GAAG,sBAAsB,CAAC,QAAQ,CAAE,EACnG,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAC7B;EACD,MAAM,wBAAwB,GAAG,OAAO,CAAC,MAAM,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAM,gBAAgB,CAAA,EAAK,kBAAkB,CAAG,EAAE,CAC/F,gBAAgB,EAChB,kBAAkB,CACnB,CAAC;EAEF,OACE,IAAA,CAAC,wBAAwB,EAAA;IAAA,QAAA,EACvB,IAAA,CAAC,cAAc,EAAA;MAAA,QAAA,EACb,IAAA,CAAC,wBAAwB,EAAA;QAAA,QAAA,EACvB,IAAA,CAAC,oBAAoB,EAAA;UAAA,QAAA,EACnB,IAAA,CAAC,sBAAsB,EAAA;YAAA,QAAA,EACrB,IAAA,CAAC,uBAAuB,EAAA,MAAA,CAAA,MAAA,CAAA;cAAC,kBAAkB,EAAE;YAAwB,CAAA,EAAA;cAAA,QAAA,EACnE,IAAA,CAAC,qBAAqB,EAAA;gBAAA,QAAA,EACpB,IAAA,CAAC,mBAAmB,EAAA;kBAAA,QAAA,EAAE;gBAAQ,CAAA;cAAuB,CAAA;YAC/B,CAAA,CAAA;UACA,CAAA;QACH,CAAA;MACJ,CAAA;IACE,CAAA;EACZ,CAAA,CACQ;AAE/B","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider } from './config';\nimport { MultiChainStateProvider } from './chainState';\nimport { useConfig } from '../hooks';\nimport { NotificationsProvider } from './notifications/provider';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { ReadonlyNetworksProvider } from './network';\nimport { BlockNumbersProvider } from './blockNumber/blockNumbers';\nimport { WindowProvider } from './window';\nimport { ConnectorContextProvider } from './network/connectors/context';\n/**\n * Provides basic services for a DApp.\n * @public\n */\nexport function DAppProvider({ config, children }) {\n    return (_jsx(ConfigProvider, Object.assign({ config: config }, { children: _jsx(DAppProviderWithConfig, { children: children }) })));\n}\nconst getMulticallAddresses = (networks) => {\n    const result = {};\n    networks === null || networks === void 0 ? void 0 : networks.forEach((network) => (result[network.chainId] = network.multicallAddress));\n    return result;\n};\nconst getMulticall2Addresses = (networks) => {\n    const result = {};\n    networks === null || networks === void 0 ? void 0 : networks.forEach((network) => {\n        if (network.multicall2Address) {\n            result[network.chainId] = network.multicall2Address;\n        }\n    });\n    return result;\n};\nfunction DAppProviderWithConfig({ children }) {\n    const { multicallAddresses, networks, multicallVersion } = useConfig();\n    const defaultAddresses = useMemo(() => (multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks)), [networks, multicallVersion]);\n    const multicallAddressesMerged = useMemo(() => (Object.assign(Object.assign({}, defaultAddresses), multicallAddresses)), [\n        defaultAddresses,\n        multicallAddresses,\n    ]);\n    return (_jsx(ConnectorContextProvider, { children: _jsx(WindowProvider, { children: _jsx(ReadonlyNetworksProvider, { children: _jsx(BlockNumbersProvider, { children: _jsx(LocalMulticallProvider, { children: _jsx(MultiChainStateProvider, Object.assign({ multicallAddresses: multicallAddressesMerged }, { children: _jsx(NotificationsProvider, { children: _jsx(TransactionProvider, { children: children }) }) })) }) }) }) }) }));\n}\n//# sourceMappingURL=DAppProvider.js.map"]},"metadata":{},"sourceType":"module"}