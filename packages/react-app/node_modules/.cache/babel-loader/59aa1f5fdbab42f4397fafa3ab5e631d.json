{"ast":null,"code":"import { providers } from 'ethers';\nimport { Event } from '../../../../helpers/event';\nexport class InjectedConnector {\n  constructor(provider) {\n    this.name = 'Injected';\n    this.update = new Event();\n    this.provider = providers.Provider.isProvider(provider) ? provider : new providers.Web3Provider(provider);\n  }\n  async connectEagerly() {\n    if (!this.provider) {\n      return;\n    }\n    try {\n      const chainId = await this.provider.send('eth_chainId', []);\n      const accounts = await this.provider.send('eth_accounts', []);\n      this.update.emit({\n        chainId: parseInt(chainId),\n        accounts\n      });\n    } catch (error) {\n      console.debug(error);\n    }\n  }\n  async activate() {\n    if (!this.provider) {\n      throw new Error('Could not activate connector');\n    }\n    try {\n      const chainId = await this.provider.send('eth_chainId', []);\n      const accounts = await this.provider.send('eth_accounts', []);\n      this.update.emit({\n        chainId: parseInt(chainId),\n        accounts\n      });\n    } catch (error) {\n      console.log(error);\n      throw new Error('Could not activate connector');\n    }\n  }\n  async deactivate() {\n    this.provider = undefined;\n  }\n}","map":{"version":3,"sources":["../../../../../../../src/providers/network/connectors/implementations/injected.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,QAAQ;AAElC,SAAS,KAAK,QAAQ,2BAA2B;AAEjD,OAAM,MAAO,iBAAiB,CAAA;EAM5B,WAAA,CAAY,QAAyF,EAAA;IAJrF,IAAA,CAAA,IAAI,GAAG,UAAU;IAExB,IAAA,CAAA,MAAM,GAAG,IAAI,KAAK,EAAuB;IAGhD,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC;EAC3G;EAEA,MAAM,cAAc,GAAA;IAClB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MAClB;IACD;IAED,IAAI;MACF,MAAM,OAAO,GAAW,MAAM,IAAI,CAAC,QAAS,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;MACpE,MAAM,QAAQ,GAAa,MAAM,IAAI,CAAC,QAAS,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC;MACxE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC;QAAE;MAAQ,CAAE,CAAC;KAC3D,CAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC;IACrB;EACH;EAEA,MAAM,QAAQ,GAAA;IACZ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MAClB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC;IAChD;IAED,IAAI;MACF,MAAM,OAAO,GAAW,MAAM,IAAI,CAAC,QAAS,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,CAAC;MACpE,MAAM,QAAQ,GAAa,MAAM,IAAI,CAAC,QAAS,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC;MACxE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC;QAAE;MAAQ,CAAE,CAAC;KAC3D,CAAC,OAAO,KAAK,EAAE;MACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;MAClB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC;IAChD;EACH;EAEA,MAAM,UAAU,GAAA;IACd,IAAI,CAAC,QAAQ,GAAG,SAAS;EAC3B;AACD","sourceRoot":"","sourcesContent":["import { providers } from 'ethers';\nimport { Event } from '../../../../helpers/event';\nexport class InjectedConnector {\n    constructor(provider) {\n        this.name = 'Injected';\n        this.update = new Event();\n        this.provider = providers.Provider.isProvider(provider) ? provider : new providers.Web3Provider(provider);\n    }\n    async connectEagerly() {\n        if (!this.provider) {\n            return;\n        }\n        try {\n            const chainId = await this.provider.send('eth_chainId', []);\n            const accounts = await this.provider.send('eth_accounts', []);\n            this.update.emit({ chainId: parseInt(chainId), accounts });\n        }\n        catch (error) {\n            console.debug(error);\n        }\n    }\n    async activate() {\n        if (!this.provider) {\n            throw new Error('Could not activate connector');\n        }\n        try {\n            const chainId = await this.provider.send('eth_chainId', []);\n            const accounts = await this.provider.send('eth_accounts', []);\n            this.update.emit({ chainId: parseInt(chainId), accounts });\n        }\n        catch (error) {\n            console.log(error);\n            throw new Error('Could not activate connector');\n        }\n    }\n    async deactivate() {\n        this.provider = undefined;\n    }\n}\n//# sourceMappingURL=injected.js.map"]},"metadata":{},"sourceType":"module"}