{"ast":null,"code":"import { utils, constants } from 'ethers';\nimport { getChainById } from './chain';\nexport const GNOSIS_SAFE_ABI = ['function nonce() view returns (uint256)', 'event ExecutionSuccess(bytes32 txHash, uint256 payment)'];\nexport const buildSafeTransaction = template => {\n  return {\n    to: template.to,\n    value: template.value || 0,\n    data: template.data || '0x',\n    operation: template.operation || 0,\n    safeTxGas: template.safeTxGas || 0,\n    baseGas: template.baseGas || 0,\n    gasPrice: template.gasPrice || 0,\n    gasToken: template.gasToken || constants.AddressZero,\n    refundReceiver: template.refundReceiver || constants.AddressZero,\n    nonce: template.nonce || 0\n  };\n};\nconst EIP712_SAFE_TX_TYPE = {\n  SafeTx: [{\n    type: 'address',\n    name: 'to'\n  }, {\n    type: 'uint256',\n    name: 'value'\n  }, {\n    type: 'bytes',\n    name: 'data'\n  }, {\n    type: 'uint8',\n    name: 'operation'\n  }, {\n    type: 'uint256',\n    name: 'safeTxGas'\n  }, {\n    type: 'uint256',\n    name: 'baseGas'\n  }, {\n    type: 'uint256',\n    name: 'gasPrice'\n  }, {\n    type: 'address',\n    name: 'gasToken'\n  }, {\n    type: 'address',\n    name: 'refundReceiver'\n  }, {\n    type: 'uint256',\n    name: 'nonce'\n  }]\n};\nexport const calculateSafeTransactionHash = (safe, safeTx, chainId) => {\n  return utils._TypedDataEncoder.hash({\n    verifyingContract: safe.address,\n    chainId\n  }, EIP712_SAFE_TX_TYPE, safeTx);\n};\nexport const getLatestNonce = async (chainId, safeAddress) => {\n  var _a, _b, _c;\n  try {\n    const response = await fetch(`https://safe-transaction.${(_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.chainName}.gnosis.io/api/v1/safes/${safeAddress}/all-transactions?limit=1&executed=false&queued=true`);\n    if (!response.ok) return null;\n    const allTransactions = await response.json();\n    const latestNonce = (_c = (_b = allTransactions === null || allTransactions === void 0 ? void 0 : allTransactions.results) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.nonce;\n    if (!latestNonce) return null;\n    return latestNonce;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\nexport const waitForSafeTransaction = async (transactionPromise, contract, chainId, safeTx) => {\n  const safeTxHash = calculateSafeTransactionHash(contract, safeTx, chainId);\n  return new Promise((resolve, reject) => {\n    void transactionPromise.catch(err => {\n      if ((err === null || err === void 0 ? void 0 : err.message) === 'Transaction was rejected') {\n        reject(err);\n      }\n    });\n    const onExecutionSuccess = async (txHash, _payment, event) => {\n      if (txHash === safeTxHash) {\n        contract.removeListener('ExecutionSuccess', onExecutionSuccess);\n        const transaction = await event.getTransaction();\n        const receipt = await event.getTransactionReceipt();\n        resolve({\n          transaction,\n          receipt,\n          rejected: false\n        });\n      } else {\n        const currentNonce = await contract.nonce();\n        if (Number(currentNonce) > Number(safeTx.nonce)) {\n          contract.removeListener('ExecutionSuccess', onExecutionSuccess);\n          const transaction = await event.getTransaction();\n          const receipt = await event.getTransactionReceipt();\n          resolve({\n            transaction,\n            receipt,\n            rejected: true\n          });\n        }\n      }\n    };\n    contract.on('ExecutionSuccess', onExecutionSuccess);\n  });\n};","map":{"version":3,"sources":["../../../../src/helpers/gnosisSafeUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { utils, constants } from 'ethers';\nimport { getChainById } from './chain';\nexport const GNOSIS_SAFE_ABI = [\n    'function nonce() view returns (uint256)',\n    'event ExecutionSuccess(bytes32 txHash, uint256 payment)',\n];\nexport const buildSafeTransaction = (template) => {\n    return {\n        to: template.to,\n        value: template.value || 0,\n        data: template.data || '0x',\n        operation: template.operation || 0,\n        safeTxGas: template.safeTxGas || 0,\n        baseGas: template.baseGas || 0,\n        gasPrice: template.gasPrice || 0,\n        gasToken: template.gasToken || constants.AddressZero,\n        refundReceiver: template.refundReceiver || constants.AddressZero,\n        nonce: template.nonce || 0,\n    };\n};\nconst EIP712_SAFE_TX_TYPE = {\n    SafeTx: [\n        { type: 'address', name: 'to' },\n        { type: 'uint256', name: 'value' },\n        { type: 'bytes', name: 'data' },\n        { type: 'uint8', name: 'operation' },\n        { type: 'uint256', name: 'safeTxGas' },\n        { type: 'uint256', name: 'baseGas' },\n        { type: 'uint256', name: 'gasPrice' },\n        { type: 'address', name: 'gasToken' },\n        { type: 'address', name: 'refundReceiver' },\n        { type: 'uint256', name: 'nonce' },\n    ],\n};\nexport const calculateSafeTransactionHash = (safe, safeTx, chainId) => {\n    return utils._TypedDataEncoder.hash({ verifyingContract: safe.address, chainId }, EIP712_SAFE_TX_TYPE, safeTx);\n};\nexport const getLatestNonce = async (chainId, safeAddress) => {\n    var _a, _b, _c;\n    try {\n        const response = await fetch(`https://safe-transaction.${(_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.chainName}.gnosis.io/api/v1/safes/${safeAddress}/all-transactions?limit=1&executed=false&queued=true`);\n        if (!response.ok)\n            return null;\n        const allTransactions = await response.json();\n        const latestNonce = (_c = (_b = allTransactions === null || allTransactions === void 0 ? void 0 : allTransactions.results) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.nonce;\n        if (!latestNonce)\n            return null;\n        return latestNonce;\n    }\n    catch (err) {\n        console.error(err);\n        return undefined;\n    }\n};\nexport const waitForSafeTransaction = async (transactionPromise, contract, chainId, safeTx) => {\n    const safeTxHash = calculateSafeTransactionHash(contract, safeTx, chainId);\n    return new Promise((resolve, reject) => {\n        void transactionPromise.catch((err) => {\n            if ((err === null || err === void 0 ? void 0 : err.message) === 'Transaction was rejected') {\n                reject(err);\n            }\n        });\n        const onExecutionSuccess = async (txHash, _payment, event) => {\n            if (txHash === safeTxHash) {\n                contract.removeListener('ExecutionSuccess', onExecutionSuccess);\n                const transaction = await event.getTransaction();\n                const receipt = await event.getTransactionReceipt();\n                resolve({ transaction, receipt, rejected: false });\n            }\n            else {\n                const currentNonce = await contract.nonce();\n                if (Number(currentNonce) > Number(safeTx.nonce)) {\n                    contract.removeListener('ExecutionSuccess', onExecutionSuccess);\n                    const transaction = await event.getTransaction();\n                    const receipt = await event.getTransactionReceipt();\n                    resolve({\n                        transaction,\n                        receipt,\n                        rejected: true,\n                    });\n                }\n            }\n        };\n        contract.on('ExecutionSuccess', onExecutionSuccess);\n    });\n};\n//# sourceMappingURL=gnosisSafeUtils.js.map"]},"metadata":{},"sourceType":"module"}