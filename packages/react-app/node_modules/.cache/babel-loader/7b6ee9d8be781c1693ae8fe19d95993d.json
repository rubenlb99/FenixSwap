{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { useIsMounted } from '../../hooks/useIsMounted';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS);\n  const isMounted = useIsMounted();\n  const {\n    chainId,\n    account\n  } = useEthers();\n  useEffect(() => {\n    if (account && chainId) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId: chainId,\n        notification: {\n          type: 'walletConnected',\n          id: nanoid(),\n          submittedAt: Date.now(),\n          address: account\n        }\n      });\n    }\n  }, [account, chainId]);\n  const addNotification = useCallback(_ref2 => {\n    let {\n      notification,\n      chainId\n    } = _ref2;\n    if (isMounted()) {\n      dispatch({\n        type: 'ADD_NOTIFICATION',\n        chainId,\n        notification: Object.assign(Object.assign({}, notification), {\n          id: nanoid()\n        })\n      });\n    }\n  }, [dispatch]);\n  const removeNotification = useCallback(_ref3 => {\n    let {\n      notificationId,\n      chainId\n    } = _ref3;\n    if (isMounted()) {\n      dispatch({\n        type: 'REMOVE_NOTIFICATION',\n        chainId,\n        notificationId\n      });\n    }\n  }, [dispatch]);\n  return _jsx(NotificationsContext.Provider, {\n    value: {\n      addNotification,\n      notifications,\n      removeNotification\n    },\n    children: children\n  });\n}","map":{"version":3,"sources":["../../../../../src/providers/notifications/provider.tsx"],"names":[],"mappings":";AAAA,SAAoB,WAAW,EAAE,SAAS,EAAE,UAAU,QAAQ,OAAO;AACrE,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,oBAAoB,QAAQ,WAAW;AAChD,SAAiC,qBAAqB,QAAmC,SAAS;AAClG,SAAS,mBAAmB,QAAQ,WAAW;AAC/C,SAAS,YAAY,QAAQ,0BAA0B;AACvD,SAAS,MAAM,QAAQ,QAAQ;AAM/B,OAAM,SAAU,qBAAqB,OAAoB;EAAA,IAAnB;IAAE;EAAQ,CAAS;EACvD,MAAM,CAAC,aAAa,EAAE,QAAQ,CAAC,GAAG,UAAU,CAAC,mBAAmB,EAAE,qBAAqB,CAAC;EACxF,MAAM,SAAS,GAAG,YAAY,EAAE;EAChC,MAAM;IAAE,OAAO;IAAE;EAAO,CAAE,GAAG,SAAS,EAAE;EAExC,SAAS,CAAC,MAAK;IACb,IAAI,OAAO,IAAI,OAAO,EAAE;MACtB,QAAQ,CAAC;QACP,IAAI,EAAE,kBAAkB;QACxB,OAAO,EAAE,OAAO;QAChB,YAAY,EAAE;UACZ,IAAI,EAAE,iBAAiB;UACvB,EAAE,EAAE,MAAM,EAAE;UACZ,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;UACvB,OAAO,EAAE;QACV;OACF,CAAC;IACH;EACH,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;EAEtB,MAAM,eAAe,GAAG,WAAW,CACjC,SAAsD;IAAA,IAArD;MAAE,YAAY;MAAE;IAAO,CAA0B;IAChD,IAAI,SAAS,EAAE,EAAE;MACf,QAAQ,CAAC;QACP,IAAI,EAAE,kBAAkB;QACxB,OAAO;QACP,YAAY,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAO,YAAY,CAAA,EAAA;UAAE,EAAE,EAAE,MAAM;QAAE,CAAA;OAC9C,CAAC;IACH;EACH,CAAC,EACD,CAAC,QAAQ,CAAC,CACX;EAED,MAAM,kBAAkB,GAAG,WAAW,CACpC,SAA2D;IAAA,IAA1D;MAAE,cAAc;MAAE;IAAO,CAA6B;IACrD,IAAI,SAAS,EAAE,EAAE;MACf,QAAQ,CAAC;QACP,IAAI,EAAE,qBAAqB;QAC3B,OAAO;QACP;OACD,CAAC;IACH;EACH,CAAC,EACD,CAAC,QAAQ,CAAC,CACX;EAED,OACE,IAAA,CAAC,oBAAoB,CAAC,QAAQ,EAAA;IAAC,KAAK,EAAE;MAAE,eAAe;MAAE,aAAa;MAAE;IAAkB,CAAE;IAAE,QAAQ,EAAE;EAAQ,CAAA,CAAI;AAExH","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers } from '../../hooks';\nimport { NotificationsContext } from './context';\nimport { DEFAULT_NOTIFICATIONS } from './model';\nimport { notificationReducer } from './reducer';\nimport { useIsMounted } from '../../hooks/useIsMounted';\nimport { nanoid } from 'nanoid';\nexport function NotificationsProvider({ children }) {\n    const [notifications, dispatch] = useReducer(notificationReducer, DEFAULT_NOTIFICATIONS);\n    const isMounted = useIsMounted();\n    const { chainId, account } = useEthers();\n    useEffect(() => {\n        if (account && chainId) {\n            dispatch({\n                type: 'ADD_NOTIFICATION',\n                chainId: chainId,\n                notification: {\n                    type: 'walletConnected',\n                    id: nanoid(),\n                    submittedAt: Date.now(),\n                    address: account,\n                },\n            });\n        }\n    }, [account, chainId]);\n    const addNotification = useCallback(({ notification, chainId }) => {\n        if (isMounted()) {\n            dispatch({\n                type: 'ADD_NOTIFICATION',\n                chainId,\n                notification: Object.assign(Object.assign({}, notification), { id: nanoid() }),\n            });\n        }\n    }, [dispatch]);\n    const removeNotification = useCallback(({ notificationId, chainId }) => {\n        if (isMounted()) {\n            dispatch({\n                type: 'REMOVE_NOTIFICATION',\n                chainId,\n                notificationId,\n            });\n        }\n    }, [dispatch]);\n    return (_jsx(NotificationsContext.Provider, { value: { addNotification, notifications, removeNotification }, children: children }));\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}