{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { subscribeToNewBlock, useReadonlyNetworks, useWindow } from '../providers';\nimport { useConnector } from '../providers/network/connectors';\nimport { useChainId } from './useChainId';\nimport { useDebounce } from './useDebounce';\nimport { useIsMounted } from './useIsMounted';\n/**\n * Get the current block number.\n * Will update automatically when the new block is mined.\n * @public\n */\nexport function useBlockNumber() {\n  const chainId = useChainId();\n  const readOnlyNetworks = useReadonlyNetworks();\n  const {\n    connector\n  } = useConnector();\n  const [blockNumber, setBlockNumber] = useState();\n  const isActive = useWindow();\n  const isMounted = useIsMounted();\n  useEffect(() => {\n    if (!isActive) {\n      return;\n    }\n    const readOnlyNetwork = chainId && readOnlyNetworks[chainId];\n    if (readOnlyNetwork) {\n      const unsub = subscribeToNewBlock(readOnlyNetwork, chainId, _ref => {\n        let {\n          blockNumber\n        } = _ref;\n        if (isMounted()) {\n          setBlockNumber(blockNumber);\n        }\n      }, isActive);\n      return () => unsub();\n    }\n    if (!connector) {\n      return;\n    }\n    const unsub = connector.newBlock.on(blockNumber => {\n      if (isMounted()) {\n        setBlockNumber(blockNumber);\n      }\n    });\n    return () => unsub();\n  }, [isActive, readOnlyNetworks, connector, chainId]);\n  const debouncedBlockNumber = useDebounce(blockNumber, 100);\n  return debouncedBlockNumber;\n}","map":{"version":3,"sources":["../../../../src/hooks/useBlockNumber.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,EAAE,QAAQ,QAAQ,OAAO;AAE3C,SAAS,mBAAmB,EAAE,mBAAmB,EAAE,SAAS,QAAQ,cAAc;AAClF,SAAS,YAAY,QAAQ,iCAAiC;AAC9D,SAAS,UAAU,QAAQ,cAAc;AACzC,SAAS,WAAW,QAAQ,eAAe;AAC3C,SAAS,YAAY,QAAQ,gBAAgB;AAE7C;;;;AAIG;AACH,OAAM,SAAU,cAAc,GAAA;EAC5B,MAAM,OAAO,GAAG,UAAU,EAAE;EAC5B,MAAM,gBAAgB,GAAG,mBAAmB,EAAE;EAC9C,MAAM;IAAE;EAAS,CAAE,GAAG,YAAY,EAAE;EACpC,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,EAAU;EACxD,MAAM,QAAQ,GAAG,SAAS,EAAE;EAC5B,MAAM,SAAS,GAAG,YAAY,EAAE;EAEhC,SAAS,CAAC,MAAK;IACb,IAAI,CAAC,QAAQ,EAAE;MACb;IACD;IAED,MAAM,eAAe,GAAG,OAAO,IAAI,gBAAgB,CAAE,OAA8B,CAAC;IACpF,IAAI,eAAe,EAAE;MACnB,MAAM,KAAK,GAAG,mBAAmB,CAC/B,eAAe,EACf,OAAO,EACP,QAAoB;QAAA,IAAnB;UAAE;QAAW,CAAE;QACd,IAAI,SAAS,EAAE,EAAE;UACf,cAAc,CAAC,WAAW,CAAC;QAC5B;MACH,CAAC,EACD,QAAQ,CACT;MACD,OAAO,MAAM,KAAK,EAAE;IACrB;IAED,IAAI,CAAC,SAAS,EAAE;MACd;IACD;IACD,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAE,WAAW,IAAI;MAClD,IAAI,SAAS,EAAE,EAAE;QACf,cAAc,CAAC,WAAW,CAAC;MAC5B;IACH,CAAC,CAAC;IACF,OAAO,MAAM,KAAK,EAAE;EACtB,CAAC,EAAE,CAAC,QAAQ,EAAE,gBAAgB,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;EAEpD,MAAM,oBAAoB,GAAG,WAAW,CAAC,WAAW,EAAE,GAAG,CAAC;EAC1D,OAAO,oBAAoB;AAC7B","sourceRoot":"","sourcesContent":["import { useEffect, useState } from 'react';\nimport { subscribeToNewBlock, useReadonlyNetworks, useWindow } from '../providers';\nimport { useConnector } from '../providers/network/connectors';\nimport { useChainId } from './useChainId';\nimport { useDebounce } from './useDebounce';\nimport { useIsMounted } from './useIsMounted';\n/**\n * Get the current block number.\n * Will update automatically when the new block is mined.\n * @public\n */\nexport function useBlockNumber() {\n    const chainId = useChainId();\n    const readOnlyNetworks = useReadonlyNetworks();\n    const { connector } = useConnector();\n    const [blockNumber, setBlockNumber] = useState();\n    const isActive = useWindow();\n    const isMounted = useIsMounted();\n    useEffect(() => {\n        if (!isActive) {\n            return;\n        }\n        const readOnlyNetwork = chainId && readOnlyNetworks[chainId];\n        if (readOnlyNetwork) {\n            const unsub = subscribeToNewBlock(readOnlyNetwork, chainId, ({ blockNumber }) => {\n                if (isMounted()) {\n                    setBlockNumber(blockNumber);\n                }\n            }, isActive);\n            return () => unsub();\n        }\n        if (!connector) {\n            return;\n        }\n        const unsub = connector.newBlock.on((blockNumber) => {\n            if (isMounted()) {\n                setBlockNumber(blockNumber);\n            }\n        });\n        return () => unsub();\n    }, [isActive, readOnlyNetworks, connector, chainId]);\n    const debouncedBlockNumber = useDebounce(blockNumber, 100);\n    return debouncedBlockNumber;\n}\n//# sourceMappingURL=useBlockNumber.js.map"]},"metadata":{},"sourceType":"module"}