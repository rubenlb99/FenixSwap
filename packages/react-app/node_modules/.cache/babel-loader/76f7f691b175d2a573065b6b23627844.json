{"ast":null,"code":"import { useMemo } from 'react';\nimport { useRawCalls } from './useRawCalls';\nimport { decodeCallResult, encodeCallData } from '../helpers';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\n/**\n * Makes a call to a specific method of a specific contract and returns the value or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the return value changes.\n * A syntax sugar for {@link useRawCall} that uses ABI, function name, and arguments instead of raw data.\n * If typechain contract is used in `call` parameter then method name and arguments will be type checked.\n * Result will be typed as well.\n *\n * More on type checking [here](https://usedapp-docs.netlify.app/docs/Guides/Reading/Typechain).\n *\n * @public\n * @param call a single call to a contract, also see {@link Call}\n * @returns The hook returns {@link CallResult} type.\n *\n * @example\n * function useTotalSupply(tokenAddress: string | undefined): BigNumber | undefined {\n *    const { value, error } = useCall(tokenAddress && {\n *      contract: new Contract(tokenAddress, ERC20Interface),\n *      method: 'totalSupply',\n *      args: []\n *    }) ?? {}\n *    if(error) {\n *      console.error(error.message)\n *      return undefined\n *    }\n *    return value?.[0]\n * }\n */\nexport function useCall(call) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useCalls([call], queryParams)[0];\n}\n/**\n * Makes calls to specific methods of specific contracts and returns values or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the return values change.\n * A syntax sugar for {@link useRawCalls} that uses ABI, function name, and arguments instead of raw data.\n * @public\n * @param calls a list of contract calls, also see {@link Call}.\n * @param queryParams see {@link QueryParams}.\n * @returns a list of results (see {@link CallResult}).\n *\n * @example\n * function useTotalSupplies(tokenAddresses: string[] | undefined): (BigNumber | undefined)[] {\n *   const calls = tokenAddresses?.map(address => ({\n *     contract: new Contract(address, ERC20Interface),\n *     method: 'totalSupply',\n *     args: []\n *   })) ?? []\n *   const results = useCalls(calls) ?? []\n *   results.forEach((result, idx) => {\n *     if(result && result.error) {\n *       console.error(`Error encountered calling 'totalSupply' on ${calls[idx]?.contract.address}: ${result.error.message}`)\n *     }\n *   })\n *   return results.map(result => result?.value?.[0])\n * }\n */\nexport function useCalls(calls) {\n  let queryParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const chainId = useChainId({\n    queryParams\n  });\n  const {\n    refresh\n  } = useConfig();\n  const potentialRawCalls = useMemo(() => calls.map(call => {\n    var _a;\n    return chainId !== undefined ? encodeCallData(call, chainId, Object.assign(Object.assign({}, queryParams), {\n      refresh: (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : refresh\n    })) : undefined;\n  }), [JSON.stringify(calls.map(call => call && {\n    address: call.contract.address.toLowerCase(),\n    method: call.method,\n    args: call.args\n  })), chainId]);\n  const rawCalls = useMemo(() => potentialRawCalls.map(potentialCall => potentialCall instanceof Error ? undefined : potentialCall), [potentialRawCalls]);\n  const results = useRawCalls(rawCalls);\n  return useMemo(() => results.map((result, idx) => {\n    if (potentialRawCalls[idx] instanceof Error) {\n      return {\n        value: undefined,\n        error: potentialRawCalls[idx]\n      };\n    }\n    return decodeCallResult(calls[idx], result);\n  }), [results]);\n}","map":{"version":3,"sources":["../../../../src/hooks/useCall.ts"],"names":[],"mappings":"AAAA,SAAS,OAAO,QAAQ,OAAO;AAG/B,SAAS,WAAW,QAAQ,eAAe;AAC3C,SAAqB,gBAAgB,EAAE,cAAc,QAAQ,YAAY;AAEzE,SAAS,UAAU,QAAQ,cAAc;AACzC,SAAS,SAAS,QAAQ,aAAa;AAoCvC;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BG;AACH,OAAM,SAAU,OAAO,CACrB,IAAyB,EACI;EAAA,IAA7B,WAAA,uEAA2B,CAAA,CAAE;EAE7B,OAAO,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;AACzC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBG;AACH,OAAM,SAAU,QAAQ,CAAC,KAAuB,EAA+B;EAAA,IAA7B,WAAA,uEAA2B,CAAA,CAAE;EAC7E,MAAM,OAAO,GAAG,UAAU,CAAC;IAAE;EAAW,CAAE,CAAC;EAC3C,MAAM;IAAE;EAAO,CAAE,GAAG,SAAS,EAAE;EAE/B,MAAM,iBAAiB,GAAG,OAAO,CAC/B,MACE,KAAK,CAAC,GAAG,CAAE,IAAI,IAAI;;IACjB,OAAA,OAAO,KAAK,SAAS,GACjB,cAAc,CAAC,IAAI,EAAE,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAO,WAAW,CAAA,EAAA;MAAE,OAAO,EAAE,CAAA,EAAA,GAAA,WAAW,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI;IAAO,CAAA,CAAA,CAAG,GAC1F,SAAS;GAAA,CACd,EACH,CACE,IAAI,CAAC,SAAS,CACZ,KAAK,CAAC,GAAG,CACN,IAAI,IAAK,IAAI,IAAI;IAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE;IAAE,MAAM,EAAE,IAAI,CAAC,MAAM;IAAE,IAAI,EAAE,IAAI,CAAC;EAAI,CAAE,CACzG,CACF,EACD,OAAO,CACR,CACF;EAED,MAAM,QAAQ,GAAG,OAAO,CACtB,MAAM,iBAAiB,CAAC,GAAG,CAAE,aAAa,IAAM,aAAa,YAAY,KAAK,GAAG,SAAS,GAAG,aAAc,CAAC,EAC5G,CAAC,iBAAiB,CAAC,CACpB;EAED,MAAM,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC;EACrC,OAAO,OAAO,CACZ,MACE,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,KAAI;IAC1B,IAAI,iBAAiB,CAAC,GAAG,CAAC,YAAY,KAAK,EAAE;MAC3C,OAAO;QAAE,KAAK,EAAE,SAAS;QAAE,KAAK,EAAE,iBAAiB,CAAC,GAAG;MAAU,CAAE;IACpE;IACD,OAAO,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC;EAC7C,CAAC,CAAC,EACJ,CAAC,OAAO,CAAC,CACV;AACH","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useRawCalls } from './useRawCalls';\nimport { decodeCallResult, encodeCallData } from '../helpers';\nimport { useChainId } from './useChainId';\nimport { useConfig } from './useConfig';\n/**\n * Makes a call to a specific method of a specific contract and returns the value or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the return value changes.\n * A syntax sugar for {@link useRawCall} that uses ABI, function name, and arguments instead of raw data.\n * If typechain contract is used in `call` parameter then method name and arguments will be type checked.\n * Result will be typed as well.\n *\n * More on type checking [here](https://usedapp-docs.netlify.app/docs/Guides/Reading/Typechain).\n *\n * @public\n * @param call a single call to a contract, also see {@link Call}\n * @returns The hook returns {@link CallResult} type.\n *\n * @example\n * function useTotalSupply(tokenAddress: string | undefined): BigNumber | undefined {\n *    const { value, error } = useCall(tokenAddress && {\n *      contract: new Contract(tokenAddress, ERC20Interface),\n *      method: 'totalSupply',\n *      args: []\n *    }) ?? {}\n *    if(error) {\n *      console.error(error.message)\n *      return undefined\n *    }\n *    return value?.[0]\n * }\n */\nexport function useCall(call, queryParams = {}) {\n    return useCalls([call], queryParams)[0];\n}\n/**\n * Makes calls to specific methods of specific contracts and returns values or an error if present.\n * The hook will cause the component to refresh when a new block is mined and the return values change.\n * A syntax sugar for {@link useRawCalls} that uses ABI, function name, and arguments instead of raw data.\n * @public\n * @param calls a list of contract calls, also see {@link Call}.\n * @param queryParams see {@link QueryParams}.\n * @returns a list of results (see {@link CallResult}).\n *\n * @example\n * function useTotalSupplies(tokenAddresses: string[] | undefined): (BigNumber | undefined)[] {\n *   const calls = tokenAddresses?.map(address => ({\n *     contract: new Contract(address, ERC20Interface),\n *     method: 'totalSupply',\n *     args: []\n *   })) ?? []\n *   const results = useCalls(calls) ?? []\n *   results.forEach((result, idx) => {\n *     if(result && result.error) {\n *       console.error(`Error encountered calling 'totalSupply' on ${calls[idx]?.contract.address}: ${result.error.message}`)\n *     }\n *   })\n *   return results.map(result => result?.value?.[0])\n * }\n */\nexport function useCalls(calls, queryParams = {}) {\n    const chainId = useChainId({ queryParams });\n    const { refresh } = useConfig();\n    const potentialRawCalls = useMemo(() => calls.map((call) => {\n        var _a;\n        return chainId !== undefined\n            ? encodeCallData(call, chainId, Object.assign(Object.assign({}, queryParams), { refresh: (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : refresh }))\n            : undefined;\n    }), [\n        JSON.stringify(calls.map((call) => call && { address: call.contract.address.toLowerCase(), method: call.method, args: call.args })),\n        chainId,\n    ]);\n    const rawCalls = useMemo(() => potentialRawCalls.map((potentialCall) => (potentialCall instanceof Error ? undefined : potentialCall)), [potentialRawCalls]);\n    const results = useRawCalls(rawCalls);\n    return useMemo(() => results.map((result, idx) => {\n        if (potentialRawCalls[idx] instanceof Error) {\n            return { value: undefined, error: potentialRawCalls[idx] };\n        }\n        return decodeCallResult(calls[idx], result);\n    }), [results]);\n}\n//# sourceMappingURL=useCall.js.map"]},"metadata":{},"sourceType":"module"}