{"ast":null,"code":"import { providers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { Event } from '../../../../helpers/event';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getMetamaskProvider() {\n  var _a;\n  if (!window.ethereum) {\n    window.open(GET_METAMASK_LINK);\n    return undefined;\n  }\n  const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];\n  const injectedProvider = (_a = injectedProviders.find(provider => {\n    var _a;\n    return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n  })) !== null && _a !== void 0 ? _a : await detectEthereumProvider();\n  if (!injectedProvider) {\n    console.log(`Metamask is not installed - you can get it under ${GET_METAMASK_LINK}`);\n    return undefined;\n  }\n  const provider = new providers.Web3Provider(injectedProvider, 'any');\n  return provider;\n}\nexport class MetamaskConnector {\n  constructor() {\n    this.name = 'Metamask';\n    this.update = new Event();\n  }\n  async init() {\n    if (this.provider) return;\n    const metamask = await getMetamaskProvider();\n    if (!metamask) {\n      return;\n    }\n    this.provider = metamask;\n  }\n  async connectEagerly() {\n    await this.init();\n    if (!this.provider) {\n      return;\n    }\n    try {\n      const chainId = await this.provider.send('eth_chainId', []);\n      const accounts = await this.provider.send('eth_accounts', []);\n      this.update.emit({\n        chainId: parseInt(chainId),\n        accounts\n      });\n    } catch (e) {\n      console.debug(e);\n    }\n  }\n  async activate() {\n    await this.init();\n    if (!this.provider) {\n      throw new Error('Could not activate connector');\n    }\n    try {\n      const chainId = await this.provider.send('eth_chainId', []);\n      const accounts = await this.provider.send('eth_requestAccounts', []);\n      this.update.emit({\n        chainId: parseInt(chainId),\n        accounts\n      });\n    } catch (e) {\n      console.log(e);\n      throw new Error('Could not activate connector');\n    }\n  }\n  async deactivate() {\n    this.provider = undefined;\n  }\n}","map":{"version":3,"sources":["../../../../../../../src/providers/network/connectors/implementations/metamask.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { providers } from 'ethers';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { Event } from '../../../../helpers/event';\nconst GET_METAMASK_LINK = 'https://metamask.io/download.html';\nexport async function getMetamaskProvider() {\n    var _a;\n    if (!window.ethereum) {\n        window.open(GET_METAMASK_LINK);\n        return undefined;\n    }\n    const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];\n    const injectedProvider = (_a = injectedProviders.find((provider) => {\n        var _a;\n        return (_a = provider.isMetaMask) !== null && _a !== void 0 ? _a : false;\n    })) !== null && _a !== void 0 ? _a : (await detectEthereumProvider());\n    if (!injectedProvider) {\n        console.log(`Metamask is not installed - you can get it under ${GET_METAMASK_LINK}`);\n        return undefined;\n    }\n    const provider = new providers.Web3Provider(injectedProvider, 'any');\n    return provider;\n}\nexport class MetamaskConnector {\n    constructor() {\n        this.name = 'Metamask';\n        this.update = new Event();\n    }\n    async init() {\n        if (this.provider)\n            return;\n        const metamask = await getMetamaskProvider();\n        if (!metamask) {\n            return;\n        }\n        this.provider = metamask;\n    }\n    async connectEagerly() {\n        await this.init();\n        if (!this.provider) {\n            return;\n        }\n        try {\n            const chainId = await this.provider.send('eth_chainId', []);\n            const accounts = await this.provider.send('eth_accounts', []);\n            this.update.emit({ chainId: parseInt(chainId), accounts });\n        }\n        catch (e) {\n            console.debug(e);\n        }\n    }\n    async activate() {\n        await this.init();\n        if (!this.provider) {\n            throw new Error('Could not activate connector');\n        }\n        try {\n            const chainId = await this.provider.send('eth_chainId', []);\n            const accounts = await this.provider.send('eth_requestAccounts', []);\n            this.update.emit({ chainId: parseInt(chainId), accounts });\n        }\n        catch (e) {\n            console.log(e);\n            throw new Error('Could not activate connector');\n        }\n    }\n    async deactivate() {\n        this.provider = undefined;\n    }\n}\n//# sourceMappingURL=metamask.js.map"]},"metadata":{},"sourceType":"module"}