{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { BigNumber, Contract, errors, utils } from 'ethers';\nimport { buildSafeTransaction, getLatestNonce, GNOSIS_SAFE_ABI } from '../helpers/gnosisSafeUtils';\nimport { useEthers } from './useEthers';\nimport { waitForSafeTransaction } from '../helpers/gnosisSafeUtils';\n/**\n * @internal\n */\nexport async function estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage) {\n  if (!signer || !transactionRequest) {\n    return undefined;\n  }\n  try {\n    const estimatedGas = transactionRequest.gasLimit ? BigNumber.from(transactionRequest.gasLimit) : await signer.estimateGas(transactionRequest);\n    return estimatedGas === null || estimatedGas === void 0 ? void 0 : estimatedGas.mul(gasLimitBufferPercentage + 100).div(100);\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n}\n/**\n * @internal\n */\nexport async function estimateContractFunctionGasLimit(contractWithSigner, functionName, args, gasLimitBufferPercentage) {\n  try {\n    const estimatedGas = await contractWithSigner.estimateGas[functionName](...args);\n    const gasLimit = estimatedGas === null || estimatedGas === void 0 ? void 0 : estimatedGas.mul(gasLimitBufferPercentage + 100).div(100);\n    return gasLimit;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n}\n/**\n * @internal\n */\nasync function isNonContractWallet(library, address) {\n  if (!library || !address) {\n    return true;\n  }\n  const code = await library.getCode(address);\n  return code === '0x';\n}\nconst isDroppedAndReplaced = e => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\nexport function usePromiseTransaction(chainId, options) {\n  const [state, setState] = useState({\n    status: 'None'\n  });\n  const {\n    addTransaction,\n    updateTransaction\n  } = useTransactionsContext();\n  const {\n    addNotification\n  } = useNotificationsContext();\n  const {\n    library,\n    account\n  } = useEthers();\n  let gnosisSafeContract = undefined;\n  useEffect(() => {\n    return () => {\n      gnosisSafeContract === null || gnosisSafeContract === void 0 ? void 0 : gnosisSafeContract.removeAllListeners();\n    };\n  }, [gnosisSafeContract]);\n  const resetState = useCallback(() => {\n    setState({\n      status: 'None'\n    });\n  }, [setState]);\n  const promiseTransaction = useCallback(async function (transactionPromise) {\n    let {\n      safeTransaction\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;\n    if (!chainId) return;\n    let transaction = undefined;\n    try {\n      setState({\n        status: 'PendingSignature',\n        chainId\n      });\n      const result = (await isNonContractWallet(library, account)) ? await handleNonContractWallet(transactionPromise) : await handleContractWallet(transactionPromise, {\n        safeTransaction\n      });\n      transaction = result === null || result === void 0 ? void 0 : result.transaction;\n      return result === null || result === void 0 ? void 0 : result.receipt;\n    } catch (e) {\n      const parsedErrorCode = parseInt((_g = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.code) !== null && _c !== void 0 ? _c : (_d = e.error) === null || _d === void 0 ? void 0 : _d.code) !== null && _e !== void 0 ? _e : (_f = e.data) === null || _f === void 0 ? void 0 : _f.code) !== null && _g !== void 0 ? _g : e.code);\n      const errorCode = isNaN(parsedErrorCode) ? undefined : parsedErrorCode;\n      const errorHash = (_l = (_k = (_j = (_h = e === null || e === void 0 ? void 0 : e.error) === null || _h === void 0 ? void 0 : _h.data) === null || _j === void 0 ? void 0 : _j.originalError) === null || _k === void 0 ? void 0 : _k.data) !== null && _l !== void 0 ? _l : (_m = e === null || e === void 0 ? void 0 : e.error) === null || _m === void 0 ? void 0 : _m.data;\n      const errorMessage = (_v = (_t = (_s = (_q = (_p = (_o = e.error) === null || _o === void 0 ? void 0 : _o.data) === null || _p === void 0 ? void 0 : _p.message) !== null && _q !== void 0 ? _q : (_r = e.error) === null || _r === void 0 ? void 0 : _r.message) !== null && _s !== void 0 ? _s : e.reason) !== null && _t !== void 0 ? _t : (_u = e.data) === null || _u === void 0 ? void 0 : _u.message) !== null && _v !== void 0 ? _v : e.message;\n      if (transaction) {\n        const droppedAndReplaced = isDroppedAndReplaced(e);\n        if (droppedAndReplaced) {\n          const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n          const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n          addNotification({\n            notification: {\n              type,\n              submittedAt: Date.now(),\n              transaction: e.replacement,\n              receipt: e.receipt,\n              transactionName: (_w = e.replacement) === null || _w === void 0 ? void 0 : _w.transactionName,\n              originalTransaction: transaction\n            },\n            chainId\n          });\n          setState({\n            status,\n            transaction: e.replacement,\n            originalTransaction: transaction,\n            receipt: e.receipt,\n            errorMessage,\n            errorCode,\n            errorHash,\n            chainId\n          });\n        } else {\n          setState({\n            status: 'Fail',\n            transaction,\n            receipt: e.receipt,\n            errorMessage,\n            errorCode,\n            errorHash,\n            chainId\n          });\n        }\n      } else {\n        setState({\n          status: 'Exception',\n          errorMessage,\n          errorCode,\n          errorHash,\n          chainId\n        });\n      }\n      return undefined;\n    }\n  }, [chainId, setState, addTransaction, options]);\n  const handleNonContractWallet = async transactionPromise => {\n    if (!chainId) return;\n    const transaction = await transactionPromise;\n    setState({\n      transaction,\n      status: 'Mining',\n      chainId\n    });\n    addTransaction({\n      transaction: Object.assign(Object.assign({}, transaction), {\n        chainId: chainId\n      }),\n      submittedAt: Date.now(),\n      transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n    });\n    const receipt = await transaction.wait();\n    updateTransaction({\n      transaction: Object.assign(Object.assign({}, transaction), {\n        chainId: chainId\n      }),\n      receipt\n    });\n    setState({\n      receipt,\n      transaction,\n      status: 'Success',\n      chainId\n    });\n    return {\n      transaction,\n      receipt\n    };\n  };\n  const handleContractWallet = async function (transactionPromise) {\n    let {\n      safeTransaction\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a;\n    if (!chainId || !library || !account) return;\n    setState({\n      status: 'CollectingSignaturePool',\n      chainId\n    });\n    gnosisSafeContract = new Contract(account, new utils.Interface(GNOSIS_SAFE_ABI), library);\n    const latestNonce = await getLatestNonce(chainId, account);\n    const safeTx = buildSafeTransaction({\n      to: (_a = safeTransaction === null || safeTransaction === void 0 ? void 0 : safeTransaction.to) !== null && _a !== void 0 ? _a : '',\n      value: safeTransaction === null || safeTransaction === void 0 ? void 0 : safeTransaction.value,\n      data: safeTransaction === null || safeTransaction === void 0 ? void 0 : safeTransaction.data,\n      nonce: latestNonce ? latestNonce + 1 : await gnosisSafeContract.nonce()\n    });\n    const {\n      transaction,\n      receipt,\n      rejected\n    } = await waitForSafeTransaction(transactionPromise, gnosisSafeContract, chainId, safeTx);\n    if (rejected) {\n      const errorMessage = 'On-chain rejection created';\n      addTransaction({\n        transaction: Object.assign(Object.assign({}, transaction), {\n          chainId: chainId\n        }),\n        receipt,\n        submittedAt: Date.now(),\n        transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n      });\n      setState({\n        status: 'Fail',\n        transaction,\n        receipt,\n        errorMessage,\n        chainId\n      });\n    } else {\n      addTransaction({\n        transaction: Object.assign(Object.assign({}, transaction), {\n          chainId: chainId\n        }),\n        receipt,\n        submittedAt: Date.now(),\n        transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n      });\n      setState({\n        receipt,\n        transaction,\n        status: 'Success',\n        chainId\n      });\n    }\n    return {\n      transaction,\n      receipt\n    };\n  };\n  return {\n    promiseTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/usePromiseTransaction.ts"],"names":[],"mappings":"AACA,SAAS,WAAW,EAAE,SAAS,EAAE,QAAQ,QAAQ,OAAO;AACxD,SAAS,uBAAuB,EAAE,sBAAsB,QAAQ,cAAc;AAE9E,SAAS,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAU,KAAK,QAAQ,QAAQ;AACnE,SAAS,oBAAoB,EAAE,cAAc,EAAE,eAAe,QAAyB,4BAA4B;AACnH,SAAS,SAAS,QAAQ,aAAa;AACvC,SAAS,sBAAsB,QAAQ,4BAA4B;AAOnE;;AAEG;AACH,OAAO,eAAe,2BAA2B,CAC/C,kBAAkD,EAClD,MAA0B,EAC1B,wBAAgC,EAAA;EAEhC,IAAI,CAAC,MAAM,IAAI,CAAC,kBAAkB,EAAE;IAClC,OAAO,SAAS;EACjB;EACD,IAAI;IACF,MAAM,YAAY,GAAG,kBAAkB,CAAC,QAAQ,GAC5C,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,GAC3C,MAAM,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC;IAChD,OAAO,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,YAAY,CAAE,GAAG,CAAC,wBAAwB,GAAG,GAAG,CAAA,CAAE,GAAG,CAAC,GAAG,CAAC;GAClE,CAAC,OAAO,GAAQ,EAAE;IACjB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;IAClB,OAAO,SAAS;EACjB;AACH;AAEA;;AAEG;AACH,OAAO,eAAe,gCAAgC,CACpD,kBAA4B,EAC5B,YAAoB,EACpB,IAAW,EACX,wBAAgC,EAAA;EAEhC,IAAI;IACF,MAAM,YAAY,GAAG,MAAM,kBAAkB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,GAAG,IAAI,CAAC;IAChF,MAAM,QAAQ,GAAG,YAAY,KAAA,IAAA,IAAZ,YAAY,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAZ,YAAY,CAAE,GAAG,CAAC,wBAAwB,GAAG,GAAG,CAAA,CAAE,GAAG,CAAC,GAAG,CAAC;IAC3E,OAAO,QAAQ;GAChB,CAAC,OAAO,GAAQ,EAAE;IACjB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;IAClB,OAAO,SAAS;EACjB;AACH;AAEA;;AAEG;AACH,eAAe,mBAAmB,CAChC,OAAuD,EACvD,OAA2B,EAAA;EAE3B,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE;IACxB,OAAO,IAAI;EACZ;EACD,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO,IAAI,KAAK,IAAI;AACtB;AAEA,MAAM,oBAAoB,GAAI,CAAM,IAClC,CAAA,CAAC,KAAA,IAAA,IAAD,CAAC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAD,CAAC,CAAE,IAAI,MAAK,MAAM,CAAC,oBAAoB,KAAI,CAAC,KAAA,IAAA,IAAD,CAAC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAD,CAAC,CAAE,WAAW,CAAA,KAAK,CAAA,CAAC,KAAA,IAAA,IAAD,CAAC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAD,CAAC,CAAE,MAAM,MAAK,UAAU,IAAI,CAAA,CAAC,KAAA,IAAA,IAAD,CAAC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAD,CAAC,CAAE,SAAS,MAAK,KAAK,CAAC;AAEnH,OAAM,SAAU,qBAAqB,CAAC,OAA2B,EAAE,OAA4B,EAAA;EAC7F,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAoB;IAAE,MAAM,EAAE;EAAM,CAAE,CAAC;EACzE,MAAM;IAAE,cAAc;IAAE;EAAiB,CAAE,GAAG,sBAAsB,EAAE;EACtE,MAAM;IAAE;EAAe,CAAE,GAAG,uBAAuB,EAAE;EACrD,MAAM;IAAE,OAAO;IAAE;EAAO,CAAE,GAAG,SAAS,EAAE;EACxC,IAAI,kBAAkB,GAAyB,SAAS;EAExD,SAAS,CAAC,MAAK;IACb,OAAO,MAAK;MACV,kBAAkB,KAAA,IAAA,IAAlB,kBAAkB,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAlB,kBAAkB,CAAE,kBAAkB,EAAE;IAC1C,CAAC;EACH,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;EAExB,MAAM,UAAU,GAAG,WAAW,CAAC,MAAK;IAClC,QAAQ,CAAC;MAAE,MAAM,EAAE;IAAM,CAAE,CAAC;EAC9B,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;EAEd,MAAM,kBAAkB,GAAG,WAAW,CACpC,gBAAO,kBAAgD,EAAsD;IAAA,IAApD;MAAE;IAAe,CAAA,uEAA6B,CAAA,CAAE;;IACvG,IAAI,CAAC,OAAO,EAAE;IACd,IAAI,WAAW,GAAoC,SAAS;IAC5D,IAAI;MACF,QAAQ,CAAC;QAAE,MAAM,EAAE,kBAAkB;QAAE;MAAO,CAAE,CAAC;MAEjD,MAAM,MAAM,GAAG,CAAC,MAAM,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,IACvD,MAAM,uBAAuB,CAAC,kBAAkB,CAAC,GACjD,MAAM,oBAAoB,CAAC,kBAAkB,EAAE;QAAE;MAAe,CAAE,CAAC;MACvE,WAAW,GAAG,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,WAAW;MACjC,OAAO,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,OAAO;KACvB,CAAC,OAAO,CAAM,EAAE;MACf,MAAM,eAAe,GAAG,QAAQ,CAAC,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,EAAA,GAAA,CAAC,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,EAAA,GAAA,CAAC,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,CAAC,IAAI,CAAC;MAChG,MAAM,SAAS,GAAG,KAAK,CAAC,eAAe,CAAC,GAAG,SAAS,GAAG,eAAe;MACtE,MAAM,SAAS,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,KAAA,IAAA,IAAD,CAAC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAD,CAAC,CAAE,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,aAAa,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,EAAA,GAAA,CAAC,KAAA,IAAA,IAAD,CAAC,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAD,CAAC,CAAE,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI;MACvE,MAAM,YAAY,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,EAAA,GAAA,CAAC,CAAC,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAA,EAAA,GAAA,CAAC,CAAC,IAAI,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,CAAC,CAAC,OAAO;MAC3G,IAAI,WAAW,EAAE;QACf,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,CAAC,CAAC;QAElD,IAAI,kBAAkB,EAAE;UACtB,MAAM,MAAM,GAAqB,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,GAAG,MAAM,GAAG,SAAS;UAC5E,MAAM,IAAI,GAAG,MAAM,KAAK,MAAM,GAAG,mBAAmB,GAAG,oBAAoB;UAE3E,eAAe,CAAC;YACd,YAAY,EAAE;cACZ,IAAI;cACJ,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;cACvB,WAAW,EAAE,CAAC,CAAC,WAAW;cAC1B,OAAO,EAAE,CAAC,CAAC,OAAO;cAClB,eAAe,EAAE,CAAA,EAAA,GAAA,CAAC,CAAC,WAAW,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,eAAe;cAC/C,mBAAmB,EAAE;aACtB;YACD;WACD,CAAC;UAEF,QAAQ,CAAC;YACP,MAAM;YACN,WAAW,EAAE,CAAC,CAAC,WAAW;YAC1B,mBAAmB,EAAE,WAAW;YAChC,OAAO,EAAE,CAAC,CAAC,OAAO;YAClB,YAAY;YACZ,SAAS;YACT,SAAS;YACT;WACD,CAAC;SACH,MAAM;UACL,QAAQ,CAAC;YAAE,MAAM,EAAE,MAAM;YAAE,WAAW;YAAE,OAAO,EAAE,CAAC,CAAC,OAAO;YAAE,YAAY;YAAE,SAAS;YAAE,SAAS;YAAE;UAAO,CAAE,CAAC;QAC3G;OACF,MAAM;QACL,QAAQ,CAAC;UAAE,MAAM,EAAE,WAAW;UAAE,YAAY;UAAE,SAAS;UAAE,SAAS;UAAE;QAAO,CAAE,CAAC;MAC/E;MACD,OAAO,SAAS;IACjB;EACH,CAAC,EACD,CAAC,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,CAAC,CAC7C;EAED,MAAM,uBAAuB,GAAG,MAAO,kBAAgD,IAAI;IACzF,IAAI,CAAC,OAAO,EAAE;IAEd,MAAM,WAAW,GAAG,MAAM,kBAAkB;IAE5C,QAAQ,CAAC;MAAE,WAAW;MAAE,MAAM,EAAE,QAAQ;MAAE;IAAO,CAAE,CAAC;IACpD,cAAc,CAAC;MACb,WAAW,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACN,WAAW,CAAA,EAAA;QACd,OAAO,EAAE;MAAO,CAAA,CACjB;MACD,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;MACvB,eAAe,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE;KAC3B,CAAC;IACF,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,IAAI,EAAE;IACxC,iBAAiB,CAAC;MAChB,WAAW,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACN,WAAW,CAAA,EAAA;QACd,OAAO,EAAE;MAAO,CAAA,CACjB;MACD;KACD,CAAC;IACF,QAAQ,CAAC;MAAE,OAAO;MAAE,WAAW;MAAE,MAAM,EAAE,SAAS;MAAE;IAAO,CAAE,CAAC;IAC9D,OAAO;MAAE,WAAW;MAAE;IAAO,CAAE;EACjC,CAAC;EAED,MAAM,oBAAoB,GAAG,gBAC3B,kBAAgD,EAE9C;IAAA,IADF;MAAE;IAAe,CAAA,uEAA6B,CAAA,CAAE;;IAEhD,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE;IACtC,QAAQ,CAAC;MAAE,MAAM,EAAE,yBAAyB;MAAE;IAAO,CAAE,CAAC;IAExD,kBAAkB,GAAG,IAAI,QAAQ,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,OAAO,CAAC;IAEzF,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC;IAE1D,MAAM,MAAM,GAAG,oBAAoB,CAAC;MAClC,EAAE,EAAE,CAAA,EAAA,GAAA,eAAe,KAAA,IAAA,IAAf,eAAe,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAf,eAAe,CAAE,EAAE,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;MAC7B,KAAK,EAAE,eAAe,KAAA,IAAA,IAAf,eAAe,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAf,eAAe,CAAE,KAAK;MAC7B,IAAI,EAAE,eAAe,KAAA,IAAA,IAAf,eAAe,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAf,eAAe,CAAE,IAAI;MAC3B,KAAK,EAAE,WAAW,GAAG,WAAW,GAAG,CAAC,GAAG,MAAM,kBAAkB,CAAC,KAAK;KACtE,CAAC;IAEF,MAAM;MAAE,WAAW;MAAE,OAAO;MAAE;IAAQ,CAAE,GAAG,MAAM,sBAAsB,CACrE,kBAAkB,EAClB,kBAAkB,EAClB,OAAO,EACP,MAAM,CACP;IAED,IAAI,QAAQ,EAAE;MACZ,MAAM,YAAY,GAAG,4BAA4B;MACjD,cAAc,CAAC;QACb,WAAW,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACN,WAAW,CAAA,EAAA;UACd,OAAO,EAAE;QAAO,CAAA,CACjB;QACD,OAAO;QACP,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;QACvB,eAAe,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE;OAC3B,CAAC;MACF,QAAQ,CAAC;QACP,MAAM,EAAE,MAAM;QACd,WAAW;QACX,OAAO;QACP,YAAY;QACZ;OACD,CAAC;KACH,MAAM;MACL,cAAc,CAAC;QACb,WAAW,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACN,WAAW,CAAA,EAAA;UACd,OAAO,EAAE;QAAO,CAAA,CACjB;QACD,OAAO;QACP,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;QACvB,eAAe,EAAE,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE;OAC3B,CAAC;MACF,QAAQ,CAAC;QAAE,OAAO;QAAE,WAAW;QAAE,MAAM,EAAE,SAAS;QAAE;MAAO,CAAE,CAAC;IAC/D;IACD,OAAO;MAAE,WAAW;MAAE;IAAO,CAAE;EACjC,CAAC;EAED,OAAO;IAAE,kBAAkB;IAAE,KAAK;IAAE;EAAU,CAAE;AAClD","sourceRoot":"","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useNotificationsContext, useTransactionsContext } from '../providers';\nimport { BigNumber, Contract, errors, utils } from 'ethers';\nimport { buildSafeTransaction, getLatestNonce, GNOSIS_SAFE_ABI } from '../helpers/gnosisSafeUtils';\nimport { useEthers } from './useEthers';\nimport { waitForSafeTransaction } from '../helpers/gnosisSafeUtils';\n/**\n * @internal\n */\nexport async function estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage) {\n    if (!signer || !transactionRequest) {\n        return undefined;\n    }\n    try {\n        const estimatedGas = transactionRequest.gasLimit\n            ? BigNumber.from(transactionRequest.gasLimit)\n            : await signer.estimateGas(transactionRequest);\n        return estimatedGas === null || estimatedGas === void 0 ? void 0 : estimatedGas.mul(gasLimitBufferPercentage + 100).div(100);\n    }\n    catch (err) {\n        console.error(err);\n        return undefined;\n    }\n}\n/**\n * @internal\n */\nexport async function estimateContractFunctionGasLimit(contractWithSigner, functionName, args, gasLimitBufferPercentage) {\n    try {\n        const estimatedGas = await contractWithSigner.estimateGas[functionName](...args);\n        const gasLimit = estimatedGas === null || estimatedGas === void 0 ? void 0 : estimatedGas.mul(gasLimitBufferPercentage + 100).div(100);\n        return gasLimit;\n    }\n    catch (err) {\n        console.error(err);\n        return undefined;\n    }\n}\n/**\n * @internal\n */\nasync function isNonContractWallet(library, address) {\n    if (!library || !address) {\n        return true;\n    }\n    const code = await library.getCode(address);\n    return code === '0x';\n}\nconst isDroppedAndReplaced = (e) => (e === null || e === void 0 ? void 0 : e.code) === errors.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === 'repriced' || (e === null || e === void 0 ? void 0 : e.cancelled) === false);\nexport function usePromiseTransaction(chainId, options) {\n    const [state, setState] = useState({ status: 'None' });\n    const { addTransaction, updateTransaction } = useTransactionsContext();\n    const { addNotification } = useNotificationsContext();\n    const { library, account } = useEthers();\n    let gnosisSafeContract = undefined;\n    useEffect(() => {\n        return () => {\n            gnosisSafeContract === null || gnosisSafeContract === void 0 ? void 0 : gnosisSafeContract.removeAllListeners();\n        };\n    }, [gnosisSafeContract]);\n    const resetState = useCallback(() => {\n        setState({ status: 'None' });\n    }, [setState]);\n    const promiseTransaction = useCallback(async (transactionPromise, { safeTransaction } = {}) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;\n        if (!chainId)\n            return;\n        let transaction = undefined;\n        try {\n            setState({ status: 'PendingSignature', chainId });\n            const result = (await isNonContractWallet(library, account))\n                ? await handleNonContractWallet(transactionPromise)\n                : await handleContractWallet(transactionPromise, { safeTransaction });\n            transaction = result === null || result === void 0 ? void 0 : result.transaction;\n            return result === null || result === void 0 ? void 0 : result.receipt;\n        }\n        catch (e) {\n            const parsedErrorCode = parseInt((_g = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.code) !== null && _c !== void 0 ? _c : (_d = e.error) === null || _d === void 0 ? void 0 : _d.code) !== null && _e !== void 0 ? _e : (_f = e.data) === null || _f === void 0 ? void 0 : _f.code) !== null && _g !== void 0 ? _g : e.code);\n            const errorCode = isNaN(parsedErrorCode) ? undefined : parsedErrorCode;\n            const errorHash = (_l = (_k = (_j = (_h = e === null || e === void 0 ? void 0 : e.error) === null || _h === void 0 ? void 0 : _h.data) === null || _j === void 0 ? void 0 : _j.originalError) === null || _k === void 0 ? void 0 : _k.data) !== null && _l !== void 0 ? _l : (_m = e === null || e === void 0 ? void 0 : e.error) === null || _m === void 0 ? void 0 : _m.data;\n            const errorMessage = (_v = (_t = (_s = (_q = (_p = (_o = e.error) === null || _o === void 0 ? void 0 : _o.data) === null || _p === void 0 ? void 0 : _p.message) !== null && _q !== void 0 ? _q : (_r = e.error) === null || _r === void 0 ? void 0 : _r.message) !== null && _s !== void 0 ? _s : e.reason) !== null && _t !== void 0 ? _t : (_u = e.data) === null || _u === void 0 ? void 0 : _u.message) !== null && _v !== void 0 ? _v : e.message;\n            if (transaction) {\n                const droppedAndReplaced = isDroppedAndReplaced(e);\n                if (droppedAndReplaced) {\n                    const status = e.receipt.status === 0 ? 'Fail' : 'Success';\n                    const type = status === 'Fail' ? 'transactionFailed' : 'transactionSucceed';\n                    addNotification({\n                        notification: {\n                            type,\n                            submittedAt: Date.now(),\n                            transaction: e.replacement,\n                            receipt: e.receipt,\n                            transactionName: (_w = e.replacement) === null || _w === void 0 ? void 0 : _w.transactionName,\n                            originalTransaction: transaction,\n                        },\n                        chainId,\n                    });\n                    setState({\n                        status,\n                        transaction: e.replacement,\n                        originalTransaction: transaction,\n                        receipt: e.receipt,\n                        errorMessage,\n                        errorCode,\n                        errorHash,\n                        chainId,\n                    });\n                }\n                else {\n                    setState({ status: 'Fail', transaction, receipt: e.receipt, errorMessage, errorCode, errorHash, chainId });\n                }\n            }\n            else {\n                setState({ status: 'Exception', errorMessage, errorCode, errorHash, chainId });\n            }\n            return undefined;\n        }\n    }, [chainId, setState, addTransaction, options]);\n    const handleNonContractWallet = async (transactionPromise) => {\n        if (!chainId)\n            return;\n        const transaction = await transactionPromise;\n        setState({ transaction, status: 'Mining', chainId });\n        addTransaction({\n            transaction: Object.assign(Object.assign({}, transaction), { chainId: chainId }),\n            submittedAt: Date.now(),\n            transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n        });\n        const receipt = await transaction.wait();\n        updateTransaction({\n            transaction: Object.assign(Object.assign({}, transaction), { chainId: chainId }),\n            receipt,\n        });\n        setState({ receipt, transaction, status: 'Success', chainId });\n        return { transaction, receipt };\n    };\n    const handleContractWallet = async (transactionPromise, { safeTransaction } = {}) => {\n        var _a;\n        if (!chainId || !library || !account)\n            return;\n        setState({ status: 'CollectingSignaturePool', chainId });\n        gnosisSafeContract = new Contract(account, new utils.Interface(GNOSIS_SAFE_ABI), library);\n        const latestNonce = await getLatestNonce(chainId, account);\n        const safeTx = buildSafeTransaction({\n            to: (_a = safeTransaction === null || safeTransaction === void 0 ? void 0 : safeTransaction.to) !== null && _a !== void 0 ? _a : '',\n            value: safeTransaction === null || safeTransaction === void 0 ? void 0 : safeTransaction.value,\n            data: safeTransaction === null || safeTransaction === void 0 ? void 0 : safeTransaction.data,\n            nonce: latestNonce ? latestNonce + 1 : await gnosisSafeContract.nonce(),\n        });\n        const { transaction, receipt, rejected } = await waitForSafeTransaction(transactionPromise, gnosisSafeContract, chainId, safeTx);\n        if (rejected) {\n            const errorMessage = 'On-chain rejection created';\n            addTransaction({\n                transaction: Object.assign(Object.assign({}, transaction), { chainId: chainId }),\n                receipt,\n                submittedAt: Date.now(),\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n            });\n            setState({\n                status: 'Fail',\n                transaction,\n                receipt,\n                errorMessage,\n                chainId,\n            });\n        }\n        else {\n            addTransaction({\n                transaction: Object.assign(Object.assign({}, transaction), { chainId: chainId }),\n                receipt,\n                submittedAt: Date.now(),\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n            });\n            setState({ receipt, transaction, status: 'Success', chainId });\n        }\n        return { transaction, receipt };\n    };\n    return { promiseTransaction, state, resetState };\n}\n//# sourceMappingURL=usePromiseTransaction.js.map"]},"metadata":{},"sourceType":"module"}